import os
import platform, getpass, pdfkit, win32print, subprocess

def get_wkhtmltopdf_path():
    system = platform.system()
    if system == "Windows":
        return r"C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe"
    elif system == "Linux":
        return "/usr/bin/wkhtmltopdf"
    else:
        raise Exception("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")

def convert_html_to_pdf(html_file, output_pdf):
    try:
        wkhtmltopdf_path = get_wkhtmltopdf_path()
        config = pdfkit.configuration(wkhtmltopdf=wkhtmltopdf_path)
        options = {
            'orientation': 'Landscape',  # –ê–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
            'page-size': 'A4'
        }
        pdfkit.from_file(html_file, output_pdf, configuration=config, options=options)
        print(f"PDF —Å–æ–∑–¥–∞–Ω: {output_pdf}")
    except OSError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")

def delete_temp_html(temp_html_file):
    if os.path.exists(temp_html_file):
        os.remove(temp_html_file)
        print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_html_file}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {temp_html_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def open_pdf(output_pdf):
    system = platform.system()
    if system == "Windows":
        os.startfile(output_pdf)
    elif system == "Linux":
        current_user = getpass.getuser()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è X-—Å–µ—Å—Å–∏–∏
        os.environ["DISPLAY"] = ":0"
        os.environ["XAUTHORITY"] = f"/home/{current_user}/.Xauthority"
        os.environ["XDG_RUNTIME_DIR"] = f"/run/user/{os.getuid()}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏ –¥–æ—Å—Ç—É–ø–æ–≤
        if os.path.exists(output_pdf):
            print(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF: {output_pdf}")

            # –î–æ–±–∞–≤–ª—è–µ–º `xhost` –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ X-—Å–µ—Ä–≤–µ—Ä—É
            os.system(f"xhost +si:localuser:{current_user} >/dev/null 2>&1")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —á–µ—Ä–µ–∑ xdg-open —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = os.system(f"xdg-open {output_pdf} >/dev/null 2>&1 &")
            if result != 0:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ X-—Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ xdg-open.")
        else:
            print(f"‚ùå –§–∞–π–ª {output_pdf} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        print("‚ö†Ô∏è –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!")

def get_available_printers():
    system = platform.system()
    printers = []

    if system == "Windows":
        for printer_info in win32print.EnumPrinters(win32print.PRINTER_ENUM_LOCAL | win32print.PRINTER_ENUM_CONNECTIONS):
            printer_name = printer_info[2]
            printers.append(printer_name)

    elif system == "Linux":
        try:
            output = subprocess.check_output(["lpstat", "-a"]).decode("utf-8")
            printers = [line.split()[0] for line in output.strip().split("\n")]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")

    return printers

def print_pdf(pdf_path, printer_name=None):
    system = platform.system()

    if system == 'Windows':
        acroread_path = r"C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe"
        if not os.path.exists(acroread_path):
            print("Adobe Reader –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        try:
            import subprocess
            command = f'"{acroread_path}" /t "{pdf_path}" "{printer_name}"'
            subprocess.run(command, shell=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ Adobe Reader: {e}")

    elif system == 'Linux':
        import subprocess
        try:
            command = ['lp']
            if printer_name:
                command += ['-d', printer_name]
            command.append(pdf_path)
            subprocess.run(command, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏: {e}")

def choose_printer_and_print(pdf_path):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    printers = get_available_printers()

    if not printers:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã.")
        return

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã:")
    for i, printer in enumerate(printers, 1):
        print(f"{i}. {printer}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä (1-{len(printers)}): ")

    try:
        selected_printer = printers[int(choice) - 1]
        print_pdf(pdf_path, selected_printer)
    except (ValueError, IndexError):
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞.")